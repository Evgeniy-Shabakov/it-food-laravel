<?php

namespace App\Http\Controllers\API\v1\Auth\Telegram;

use App\Http\Controllers\Controller;
use App\Models\Company;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;

class TelegramBotController extends Controller
{
   protected string $botToken;
   protected string $serviceName;

   public function __construct()
   {
      $this->botToken = config('telegram.bot_token'); // –ö–æ–Ω—Ñ–∏–≥ –≤—Å–µ–≥–¥–∞ –≤ –ø–∞–º—è—Ç–∏
      $this->serviceName = cache()->remember('company_brand', 3600, function () {
         return Company::first()->brand_title; // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å
      });
   }

   public function __invoke(Request $request)
   {

      $update = $request->all();

      if (isset($update['message']['text'])) {
         $this->handleTextMessage($update['message']);
      }

      if (isset($update['message']['contact'])) {
         $this->handleContactMessage($update['message']);
      }

      return response()->noContent();
   }

   protected function handleTextMessage($message)
   {
      $chatId = $message['chat']['id'];
      $text = trim($message['text']);

      switch (true) {
         case str_starts_with($text, '/start'):
            $this->handleStartCommand($chatId, $text);
            break;

         case $text === '/help':
            $this->sendSimpleMessage($chatId, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help');
            break;

         default:
            $this->sendSimpleMessage($chatId, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É: '{$text}'. –ù–∞–ø–∏—à–∏—Ç–µ /help");
      }
   }

   protected function handleStartCommand(int $chatId, string $text)
   {
      $parts = explode(' ', $text);
      $userAuthToken = $parts[1] ?? null;

      if (!$userAuthToken) {
         $this->sendSimpleMessage($chatId, "–î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {$this->serviceName}");
         return;
      }

      $cacheKey = 'telegram_auth_' . $userAuthToken;
      $data = Cache::get($cacheKey);

      if (!$data) {
         $this->sendSimpleMessage($chatId, "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.");
         return;
      }

      Cache::put($cacheKey, array_merge($data, [ // –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
         'status' => 'waiting_phone'
      ]), now()->addMinutes(15));

      // üî• –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å chat_id ‚Üí token –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      Cache::put('telegram_chat_' . $chatId, $userAuthToken, now()->addMinutes(15));

      $this->sendPhoneRequest($chatId);
   }

   protected function handleContactMessage($message)
   {
      $chatId = $message['chat']['id'];
      $phoneNumber = $message['contact']['phone_number'];

      $phoneNumber = $this->normalizePhoneNumber($phoneNumber);

      $userAuthToken = Cache::get('telegram_chat_' . $chatId); // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –ø–æ chat_id

      if (!$userAuthToken) {
         $this->sendSimpleMessage($chatId, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.");
         return;
      }

      $cacheKey = 'telegram_auth_' . $userAuthToken;  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      $authData = Cache::get($cacheKey);

      if (!$authData || ($authData['status'] !== 'waiting_phone')) {
         $this->sendSimpleMessage($chatId, "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
         return;
      }

      Cache::put($cacheKey, array_merge($authData, [      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å)
         'status' => 'verified',
         'phone_number' => $phoneNumber,
      ]), now()->addMinutes(15));

      Cache::forget('telegram_chat_' . $chatId);   // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–≤—è–∑—å chat_id ‚Üí token

      $this->sendSimpleMessage($chatId, "‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.
      \n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–µ—Ä–≤–∏—Å {$this->serviceName}. –í—Ö–æ–¥ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
   }

   protected function sendSimpleMessage(int $chatId, string $text)
   {
      try {
         Http::post("https://api.telegram.org/bot{$this->botToken}/sendMessage", [
            'chat_id' => $chatId,
            'text' => $text
         ]);
      } catch (\Exception $e) {
         Log::error("Telegram API error: " . $e->getMessage());
      }
   }

   protected function sendPhoneRequest($chatID)
   {
      try {
         Http::post("https://api.telegram.org/bot{$this->botToken}/sendMessage", [
            'chat_id' => $chatID,
            'text' => "–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–µ—Ä–≤–∏—Å {$this->serviceName} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            'reply_markup' => json_encode([
               'keyboard' => [
                  [
                     [
                        'text' => '‚úÖ –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê',
                        'request_contact' => true
                     ]
                  ]
               ],
               'resize_keyboard' => true,
               'one_time_keyboard' => true
            ])
         ]);
      } catch (\Exception $e) {
         Log::error("Telegram API error: " . $e->getMessage());
      }
   }

   protected function normalizePhoneNumber(string $phone): string
   {
      $phone = trim($phone);

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –≤–µ–¥—É—â–µ–≥–æ '+'
      $cleaned = preg_replace('/[^\d+]/', '', $phone);

      // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '+', –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      if (strpos($cleaned, '+') !== 0) {
         $cleaned = '+' . ltrim($cleaned, '+');
      }

      return $cleaned;
   }
}
